/** Celestra ES6 extension * @version 2.5.2 * @see https://github.com/Serrin/Celestra/ * @license MIT */
(function(window,celestra){
"use strict";
if(!window.GeneratorFunction){window.GeneratorFunction=Object.getPrototypeOf(function*(){}).constructor;}
const iterRange=function*iterRange(start=0,step=1,end=Infinity){let i=start;while(i<=end){yield i;i+=step;}};
const iterCycle=function*iterCycle(it,n=Infinity){let i=0;let it2=Array.from(it);while(i<n){yield* it2.values();i++;}};
const iterRepeat=function*iterRepeat(value,n=Infinity){let i=0;while(i<n){yield value;i++;}};
const takeOf=function*takeOf(it,n){let i=n;for(let item of it){if(i<=0){break;}yield item;i--;}};
const iterTake=takeOf;
const dropOf=function*dropOf(it,n){let i=n;for(let item of it){if(i<1){yield item;}else{i--;}}};
const iterDrop=dropOf;
const forOf=function forOf(it,fn){let i=0;for(let item of it){fn(item,i++);}};
const mapOf=function*mapOf(it,fn){let i=0;for(let item of it){yield fn(item,i++);}};
const filterOf=function*filterOf(it,fn){let i=0;for(let item of it){if(fn(item,i++)){yield item;}}};
const sliceOf=function*sliceOf(it,begin=0,end=Infinity){let i=0;for(let item of it){if(i>=begin&&i<=end){yield item;}else if(i>end){return;}i++;}};
const isGenerator = function isGenerator(v){return (Object.getPrototypeOf(v).constructor===Object.getPrototypeOf(function*(){}).constructor);};
celestra.iterRange=iterRange;
celestra.iterCycle=iterCycle;
celestra.iterRepeat=iterRepeat;
celestra.takeOf=takeOf;
celestra.iterTake=iterTake;
celestra.dropOf=dropOf;
celestra.iterDrop=iterDrop;
celestra.forOf=forOf;
celestra.mapOf=mapOf;
celestra.filterOf=filterOf;
celestra.sliceOf=sliceOf;
celestra.isGenerator=isGenerator;
}(window,celestra));